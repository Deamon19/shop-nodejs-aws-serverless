{
  "service": {
    "service": "product-service",
    "serviceObject": {
      "name": "product-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "region": "eu-west-3",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:eu-west-3:108650243678:table/product-service-products-dev",
                "arn:aws:dynamodb:eu-west-3:108650243678:table/product-service-stocks-dev"
              ]
            }
          ]
        }
      },
      "environment": {
        "DYNAMODB_PRODUCTS_TABLE": "product-service-products-dev",
        "DYNAMODB_STOCKS_TABLE": "product-service-stocks-dev"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetProductByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-getProductById"
            }
          },
          "GetAllProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-getAllProducts"
            }
          },
          "MockProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-mockProducts"
            }
          },
          "CreateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/product-service-dev-createProduct"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "product-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/product-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/product-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "product-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetProductByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1678643015780-2023-03-12T17:43:35.780Z/product-service.zip"
              },
              "Handler": "src/index.getProductByIdHandler",
              "Runtime": "nodejs12.x",
              "FunctionName": "product-service-dev-getProductById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_PRODUCTS_TABLE": "product-service-products-dev",
                  "DYNAMODB_STOCKS_TABLE": "product-service-stocks-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductByIdLogGroup"
            ]
          },
          "GetAllProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1678643015780-2023-03-12T17:43:35.780Z/product-service.zip"
              },
              "Handler": "src/index.getAllProductsHandler",
              "Runtime": "nodejs12.x",
              "FunctionName": "product-service-dev-getAllProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_PRODUCTS_TABLE": "product-service-products-dev",
                  "DYNAMODB_STOCKS_TABLE": "product-service-stocks-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllProductsLogGroup"
            ]
          },
          "MockProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1678643015780-2023-03-12T17:43:35.780Z/product-service.zip"
              },
              "Handler": "src/index.mockProductsHandler",
              "Runtime": "nodejs12.x",
              "FunctionName": "product-service-dev-mockProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_PRODUCTS_TABLE": "product-service-products-dev",
                  "DYNAMODB_STOCKS_TABLE": "product-service-stocks-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MockProductsLogGroup"
            ]
          },
          "CreateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/product-service/dev/1678643015780-2023-03-12T17:43:35.780Z/product-service.zip"
              },
              "Handler": "src/index.createProductHandler",
              "Runtime": "nodejs12.x",
              "FunctionName": "product-service-dev-createProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_PRODUCTS_TABLE": "product-service-products-dev",
                  "DYNAMODB_STOCKS_TABLE": "product-service-stocks-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProductLogGroup"
            ]
          },
          "GetProductByIdLambdaVersionXlL3Trv4E9BzxsZ0KpZFxliQGNUsrAJWpSmUdxA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductByIdLambdaFunction"
              },
              "CodeSha256": "0ME++Fkyt7dcf3njmCREA5FaQYPR27nczDc6joYw+Qw="
            }
          },
          "GetAllProductsLambdaVersionjOA9ZPeO7AThz0vXEqyKCQssclNsswRFUPzKyVXj2Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllProductsLambdaFunction"
              },
              "CodeSha256": "0ME++Fkyt7dcf3njmCREA5FaQYPR27nczDc6joYw+Qw="
            }
          },
          "MockProductsLambdaVersion7U1V2YxzAyiIUeyeqRpo7IyHVrOffBeXpSDRM0HSx6g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MockProductsLambdaFunction"
              },
              "CodeSha256": "0ME++Fkyt7dcf3njmCREA5FaQYPR27nczDc6joYw+Qw="
            }
          },
          "CreateProductLambdaVersionlRAI4xLprHN9n3oyn44U6ONEdH1zX4n7zQFyhj2ILog": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProductLambdaFunction"
              },
              "CodeSha256": "0ME++Fkyt7dcf3njmCREA5FaQYPR27nczDc6joYw+Qw="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-product-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsProductidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{productId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsMock": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "mock",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsProductidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsProductidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsMockOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsMock"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsProductidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.productId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsProductidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayProductserviceRequestValidator"
              }
            },
            "DependsOn": [
              "GetProductByIdLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsMockGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsMock"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MockProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MockProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayProductserviceRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "product-service-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayDeployment1678642968720": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProductsProductidVarOptions",
              "ApiGatewayMethodProductsOptions",
              "ApiGatewayMethodProductsMockOptions",
              "ApiGatewayMethodProductsProductidVarGet",
              "ApiGatewayMethodProductsGet",
              "ApiGatewayMethodProductsMockGet",
              "ApiGatewayMethodProductsPost"
            ]
          },
          "GetProductByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MockProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MockProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "Products": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "product-service-products-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          },
          "Stocks": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "product-service-stocks-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "product_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "product_id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 5
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-product-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetProductByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductByIdLambdaVersionXlL3Trv4E9BzxsZ0KpZFxliQGNUsrAJWpSmUdxA"
            },
            "Export": {
              "Name": "sls-product-service-dev-GetProductByIdLambdaFunctionQualifiedArn"
            }
          },
          "GetAllProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllProductsLambdaVersionjOA9ZPeO7AThz0vXEqyKCQssclNsswRFUPzKyVXj2Q"
            },
            "Export": {
              "Name": "sls-product-service-dev-GetAllProductsLambdaFunctionQualifiedArn"
            }
          },
          "MockProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MockProductsLambdaVersion7U1V2YxzAyiIUeyeqRpo7IyHVrOffBeXpSDRM0HSx6g"
            },
            "Export": {
              "Name": "sls-product-service-dev-MockProductsLambdaFunctionQualifiedArn"
            }
          },
          "CreateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProductLambdaVersionlRAI4xLprHN9n3oyn44U6ONEdH1zX4n7zQFyhj2ILog"
            },
            "Export": {
              "Name": "sls-product-service-dev-CreateProductLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-product-service-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "webpack.config.js",
        "includeModules": true,
        "dotenvVars": {
          "ALLUSERSPROFILE": "C:\\ProgramData",
          "APPDATA": "C:\\Users\\Dmytro_Romanenko\\AppData\\Roaming",
          "ChocolateyInstall": "C:\\ProgramData\\chocolatey",
          "ChocolateyLastPathUpdate": "133116123367546602",
          "CHROME_CRASHPAD_PIPE_NAME": "\\\\.\\pipe\\LOCAL\\crashpad_25200_WZLHCCMDINMSJZKB",
          "COLORTERM": "truecolor",
          "CommonProgramFiles": "C:\\Program Files\\Common Files",
          "CommonProgramFiles(x86)": "C:\\Program Files (x86)\\Common Files",
          "CommonProgramW6432": "C:\\Program Files\\Common Files",
          "COMPUTERNAME": "EPUAKYIW0CFF",
          "ComSpec": "C:\\WINDOWS\\system32\\cmd.exe",
          "DriverData": "C:\\Windows\\System32\\Drivers\\DriverData",
          "FPS_BROWSER_APP_PROFILE_STRING": "Internet Explorer",
          "FPS_BROWSER_USER_PROFILE_STRING": "Default",
          "GIT_ASKPASS": "c:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass.sh",
          "HOMEDRIVE": "C:",
          "HOMEPATH": "\\Users\\Dmytro_Romanenko",
          "INIT_CWD": "C:\\Users\\Dmytro_Romanenko\\Desktop\\shop-nodejs-aws-serverless\\product-service",
          "JAVA_HOME": "C:\\Program Files\\Java\\jdk-18.0.2.1",
          "LANG": "en_US.UTF-8",
          "LIBJABRA_TRACE_LEVEL": "debug",
          "LOCALAPPDATA": "C:\\Users\\Dmytro_Romanenko\\AppData\\Local",
          "LOGONSERVER": "\\\\EPUAKYIW0CFF",
          "NODE": "C:\\Program Files\\nodejs\\node.exe",
          "npm_config_argv": "{\"remain\":[],\"cooked\":[\"run\",\"deploy:dev\"],\"original\":[\"deploy:dev\"]}",
          "npm_config_bin_links": "true",
          "npm_config_ignore_optional": "",
          "npm_config_ignore_scripts": "",
          "npm_config_init_license": "MIT",
          "npm_config_init_version": "1.0.0",
          "npm_config_registry": "https://registry.yarnpkg.com",
          "npm_config_save_prefix": "^",
          "npm_config_strict_ssl": "true",
          "npm_config_user_agent": "yarn/1.22.4 npm/? node/v16.18.0 win32 x64",
          "npm_config_version_commit_hooks": "true",
          "npm_config_version_git_message": "v%s",
          "npm_config_version_git_sign": "",
          "npm_config_version_git_tag": "true",
          "npm_config_version_tag_prefix": "v",
          "npm_config__wickesit_registry": "https://gitlab.com/api/v4/projects/14515144/packages/npm/",
          "npm_execpath": "C:\\Program Files (x86)\\Yarn\\bin\\yarn.js",
          "npm_lifecycle_event": "deploy:dev",
          "npm_lifecycle_script": "sls deploy --stage dev",
          "npm_node_execpath": "C:\\Program Files\\nodejs\\node.exe",
          "npm_package_author_name": "JSCC",
          "npm_package_dependencies_aws_sdk": "^2.1333.0",
          "npm_package_dependencies_babel_jest": "^29.4.3",
          "npm_package_dependencies_jest": "^29.4.3",
          "npm_package_dependencies_jest_extended": "^3.2.4",
          "npm_package_dependencies_jest_when": "^3.5.2",
          "npm_package_dependencies_pg": "^8.6.0",
          "npm_package_dependencies_serverless_offline": "^12.0.4",
          "npm_package_dependencies_uuid": "^8.3.2",
          "npm_package_dependencies_winston": "^3.8.2",
          "npm_package_dependencies__types_jest": "^29.4.0",
          "npm_package_description": "Product Service created API Gateway and Lambdas",
          "npm_package_devDependencies_dotenv": "^8.2.0",
          "npm_package_devDependencies_fork_ts_checker_webpack_plugin": "^3.0.1",
          "npm_package_devDependencies_serverless_webpack": "^5.4.0",
          "npm_package_devDependencies_ts_jest": "^29.0.5",
          "npm_package_devDependencies_ts_loader": "^5.3.3",
          "npm_package_devDependencies_ts_node": "^8.10.2",
          "npm_package_devDependencies_typescript": "^4.7.4",
          "npm_package_devDependencies_webpack": "^4.29.0",
          "npm_package_devDependencies_webpack_node_externals": "^1.7.2",
          "npm_package_devDependencies__babel_preset_typescript": "^7.21.0",
          "npm_package_devDependencies__jest_globals": "^29.4.3",
          "npm_package_devDependencies__types_aws_lambda": "^8.10.73",
          "npm_package_devDependencies__types_node": "^10.17.56",
          "npm_package_devDependencies__types_pg": "^7.14.11",
          "npm_package_devDependencies__types_serverless": "^1.78.23",
          "npm_package_devDependencies__types_uuid": "^8.3.0",
          "npm_package_license": "MIT",
          "npm_package_main": "handler.js",
          "npm_package_name": "product-service",
          "npm_package_readmeFilename": "README.md",
          "npm_package_scripts_deploy_dev": "sls deploy --stage dev",
          "npm_package_scripts_deploy_prod": "sls deploy --stage prod",
          "npm_package_scripts_package_build": "sls package",
          "npm_package_scripts_remove_dev_stack": "sls remove --stage dev --region eu-west-3",
          "npm_package_scripts_remove_prod_stack": "sls remove --stage prod --region eu-west-3",
          "npm_package_scripts_test": "jest/test",
          "npm_package_version": "1.0.0",
          "NUMBER_OF_PROCESSORS": "8",
          "NVM_HOME": "C:\\Users\\Dmytro_Romanenko\\AppData\\Roaming\\nvm",
          "NVM_SYMLINK": "C:\\Program Files\\nodejs",
          "OneDrive": "C:\\Users\\Dmytro_Romanenko\\OneDrive - EPAM",
          "OneDriveCommercial": "C:\\Users\\Dmytro_Romanenko\\OneDrive - EPAM",
          "ORIGINAL_XDG_CURRENT_DESKTOP": "undefined",
          "OS": "Windows_NT",
          "Path": "C:\\Users\\DMYTRO~1\\AppData\\Local\\Temp\\yarn--1678642967156-0.7606296790658427;C:\\Users\\Dmytro_Romanenko\\Desktop\\shop-nodejs-aws-serverless\\product-service\\node_modules\\.bin;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Yarn\\Data\\link\\node_modules\\.bin;C:\\Program Files\\libexec\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\lib\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;C:\\Python311\\Scripts\\;C:\\Python311\\;C:\\Program Files\\Common Files\\Oracle\\Java\\javapath;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files\\Docker\\Docker\\resources\\bin;C:\\ProgramData\\DockerDesktop\\version-bin;C:\\Program Files (x86)\\Yarn\\bin\\;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310\\;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310\\Scripts;C:\\Users\\Dmytro_Romanenko\\AppData\\roaming\\Python\\Python310\\scripts;C:\\Program Files\\Java\\jdk-18.0.2.1\\bin;C:\\Program Files\\Amazon\\AWSCLIV2\\;C:\\Program Files\\Git\\cmd;C:\\ProgramData\\chocolatey\\bin;%NVM_HOME%;%NVM_SYMLINK%;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Python\\Python310\\;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Yarn\\bin;C:\\Users\\Dmytro_Romanenko\\AppData\\Roaming\\nvm;C:\\Program Files\\nodejs;",
          "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW",
          "PROCESSOR_ARCHITECTURE": "AMD64",
          "PROCESSOR_IDENTIFIER": "Intel64 Family 6 Model 142 Stepping 12, GenuineIntel",
          "PROCESSOR_LEVEL": "6",
          "PROCESSOR_REVISION": "8e0c",
          "ProgramData": "C:\\ProgramData",
          "ProgramFiles": "C:\\Program Files",
          "ProgramFiles(x86)": "C:\\Program Files (x86)",
          "ProgramW6432": "C:\\Program Files",
          "PROMPT": "$P$G",
          "PSModulePath": "C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules",
          "PUBLIC": "C:\\Users\\Public",
          "SESSIONNAME": "Console",
          "SystemDrive": "C:",
          "SystemRoot": "C:\\WINDOWS",
          "TEMP": "C:\\Users\\DMYTRO~1\\AppData\\Local\\Temp",
          "TERM_PROGRAM": "vscode",
          "TERM_PROGRAM_VERSION": "1.76.1",
          "TMP": "C:\\Users\\DMYTRO~1\\AppData\\Local\\Temp",
          "UATDATA": "C:\\Windows\\CCM\\UATData\\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77",
          "USERDNSDOMAIN": "epam.com",
          "USERDOMAIN": "EPAM",
          "USERDOMAIN_ROAMINGPROFILE": "EPAM",
          "USERNAME": "Dmytro_Romanenko",
          "USERPROFILE": "C:\\Users\\Dmytro_Romanenko",
          "VSCODE_GIT_ASKPASS_EXTRA_ARGS": "--ms-enable-electron-run-as-node",
          "VSCODE_GIT_ASKPASS_MAIN": "c:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\extensions\\git\\dist\\askpass-main.js",
          "VSCODE_GIT_ASKPASS_NODE": "C:\\Users\\Dmytro_Romanenko\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe",
          "VSCODE_GIT_IPC_HANDLE": "\\\\.\\pipe\\vscode-git-d6a37d596d-sock",
          "windir": "C:\\WINDOWS",
          "YARN_WRAP_OUTPUT": "false",
          "ZES_ENABLE_SYSMAN": "1",
          "__COMPAT_LAYER": "DetectorsAppHealth",
          "__PSLockDownPolicy": "0"
        }
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "getProductById": {
        "handler": "src/index.getProductByIdHandler",
        "events": [
          {
            "http": {
              "path": "products/{productId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.path.productId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-getProductById",
        "package": {
          "artifact": ".serverless\\product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetProductByIdLambdaVersionXlL3Trv4E9BzxsZ0KpZFxliQGNUsrAJWpSmUdxA"
      },
      "getAllProducts": {
        "handler": "src/index.getAllProductsHandler",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-getAllProducts",
        "package": {
          "artifact": ".serverless\\product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllProductsLambdaVersionjOA9ZPeO7AThz0vXEqyKCQssclNsswRFUPzKyVXj2Q"
      },
      "mockProducts": {
        "handler": "src/index.mockProductsHandler",
        "events": [
          {
            "http": {
              "path": "products/mock",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-mockProducts",
        "package": {
          "artifact": ".serverless\\product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "MockProductsLambdaVersion7U1V2YxzAyiIUeyeqRpo7IyHVrOffBeXpSDRM0HSx6g"
      },
      "createProduct": {
        "handler": "src/index.createProductHandler",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "request": {
                "schema": {
                  "application/json": {
                    "title": "CreateProductValidation",
                    "description": "Payload used to validate create product functionality",
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "price": {
                        "type": "integer"
                      },
                      "logo": {
                        "type": "string"
                      },
                      "count": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "title",
                      "description",
                      "price",
                      "count"
                    ]
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "product-service-dev-createProduct",
        "package": {
          "artifact": ".serverless\\product-service.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateProductLambdaVersionlRAI4xLprHN9n3oyn44U6ONEdH1zX4n7zQFyhj2ILog"
      }
    },
    "resources": {
      "Resources": {
        "Products": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "product-service-products-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        },
        "Stocks": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "product-service-stocks-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "product_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "product_id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "product-service",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/product-service/dev/1678643015780-2023-03-12T17:43:35.780Z",
    "artifact": ""
  }
}